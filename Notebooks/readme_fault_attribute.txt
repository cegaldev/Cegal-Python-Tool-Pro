# Python Tool Pro examples
This readme explains how to use the Python Tool Pro examples included in this release.

## Requirements:
1. anaconda, available at https://www.anaconda.com/

## Setting up Jupyter Notebook and Pythontool Pro.
We have prepared a conda environment that handles the dependencies required to run the included notebooks. To create it execute the following command in your Anaconda Prompt shell:

`conda env create --name pythontoolpro-examples -f ./fault_attribute_venv.yml`

To activate the environment type:

`conda activate pythontoolpro-examples`

Install package blueback_pythontoolpro with

'pip install blueback_pythontoolpro-<version>-py3-none-any.whl'

where <version> must be
replaced with the relevant version number.

## Running the notebooks:

Steps to run notebooks:

1. Launch petrel, and open some project.
2. In Petrel, start Python Tool Pro, and log in.
3. In the Anaconda Prompt Shell execute the following command: `conda activate pythontoolpro-examples`. It activates the conda environment we created earlier.
4. In the Anaconda Prompt Shell execute the following command: `jupyter-notebook`. It will open a browser window that connects with a local jupyter server.

# Notebook specific instructions:
## example_fault_attribute.ipynb
This example demonstrates how to apply a trained TensorFlow model on a seismic cube to generate a fault attribute.
### Requirements
1. A petrel project containing a seismic cube with dimensions greater than 128x128x128.
2. A pre-trained fault attribute model distributed on github by Dr. Xinming Wu with a CC BY-NC 4.0 license.

### Getting the required pre-trained machine learning model:
This notebook uses a model made by Dr. Xinming Wu. He distributed the model on Github with a CC BY-NC 4.0 license. To access Dr. Xinming Wu's fault attribute model, please follow the directions specified in https://github.com/xinwucwp/faultSeg/blob/master/model/README.md. Download the file named fseg-70.hdf5, and place it in the same folder as this readme. This file contains the pre-trained model weights generated by Dr. Xinming Wu.